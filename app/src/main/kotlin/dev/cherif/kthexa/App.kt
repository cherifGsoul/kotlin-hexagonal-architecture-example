/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package dev.cherif.kthexa

import java.util.UUID

class App {
    val bookService: BookService = BookService(InMemoryBooks())
}

// INPUTS DTO
data class CreateAuthorInput(val fname: String, val lname: String) // DTO (Data Transfer Object)
data class CreateBookWithNewAuthorInput(val title: String, val author: CreateAuthorInput) // DTO (Data Transfer Object)
data class CreateBookWithExistingAuthorInput(val title: String, val author: String) // DTO (Data Transfer Object)
// END INPUT DTO

// OUTPUT DTO
data class BookData(val id: String, val title: String,val author: AuthorData) {
    companion object {
        fun fromBook(book: Book): BookData {
            return BookData(book.id.toString(), book.title.toString(), AuthorData.fromAuthor(book.author))
        }
    }
}
data class AuthorData(val id: String, val fname: String, val lname: String) {
    companion object {
        fun fromAuthor(author: Author): AuthorData {
            return AuthorData(author.id.toString(), author.name.fname.toString(), author.name.lname.toString())
        }
    }
}

interface Books {
    fun save(book: BookData)
}
// END OUTPUT DTO


// BUSINESS OBJECTS
data class FullName(val fname: NonEmptyString, val lname: NonEmptyString)

data class NonEmptyString private constructor(val s: String) {
    companion object {
        fun fromString(s: String): NonEmptyString {
            if (s.isEmpty()) {
                throw Exception("Value can be empty string")
            }
            return NonEmptyString(s)
        }
    }
}

data class Author(val id: UUID, val name: FullName)
data class Book(val id: UUID, val title: NonEmptyString, val author: Author)
// END BUSINESS OBJECTS

// DRIVEN SIDE

// === Persistence
class InMemoryBooks: Books {

    private val books: MutableMap<String, BookData> = mutableMapOf()

    override fun save(book: BookData) {
        this.books[book.id.toString()] = book
    }
}
// END DRIVEN SIDE


// BUSINESS PUBLIC API
class BookService (private val books: Books) {

    fun createWithNewAuthor(input: CreateBookWithNewAuthorInput): BookData {
        val author = Author(
            UUID.randomUUID(),
                FullName(NonEmptyString.fromString(input.author.fname),
                NonEmptyString.fromString(input.author.lname)
            )
        )
        val book = Book(
            UUID.randomUUID(),
            NonEmptyString.fromString(input.title),
            author
        )
        val bookData = BookData.fromBook(book)
        books.save(bookData)
        return bookData
    }

    fun createWithExistingAuthor(input: CreateAuthorInput) {
        println(input.fname)
    }

    fun getById() {

    }

    fun update () {

    }

    fun delete() {

    }
}


class AuthorService {
    fun create() {

    }

    fun getById() {

    }

    fun update () {

    }

    fun delete() {

    }
}

fun main() {
    val input = CreateBookWithNewAuthorInput("Habib Allah", CreateAuthorInput("Habib Allah", "Ayata"))
    println(App().bookService.createWithNewAuthor(input))
}
